/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef wal_TYPES_H
#define wal_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class ClientOps;

class ClientOpsRetval;

class Ping_ACK;

typedef struct _ClientOps__isset {
  _ClientOps__isset() : op_type(false), key(false), value(false) {}
  bool op_type :1;
  bool key :1;
  bool value :1;
} _ClientOps__isset;

class ClientOps : public virtual ::apache::thrift::TBase {
 public:

  ClientOps(const ClientOps&);
  ClientOps& operator=(const ClientOps&);
  ClientOps() : op_type(0), key(), value() {
  }

  virtual ~ClientOps() throw();
  int32_t op_type;
  std::string key;
  std::string value;

  _ClientOps__isset __isset;

  void __set_op_type(const int32_t val);

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const ClientOps & rhs) const
  {
    if (!(op_type == rhs.op_type))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ClientOps &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientOps & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ClientOps &a, ClientOps &b);

inline std::ostream& operator<<(std::ostream& out, const ClientOps& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ClientOpsRetval__isset {
  _ClientOpsRetval__isset() : errNo(false), key(false), value(false) {}
  bool errNo :1;
  bool key :1;
  bool value :1;
} _ClientOpsRetval__isset;

class ClientOpsRetval : public virtual ::apache::thrift::TBase {
 public:

  ClientOpsRetval(const ClientOpsRetval&);
  ClientOpsRetval& operator=(const ClientOpsRetval&);
  ClientOpsRetval() : errNo(0), key(), value() {
  }

  virtual ~ClientOpsRetval() throw();
  int32_t errNo;
  std::string key;
  std::string value;

  _ClientOpsRetval__isset __isset;

  void __set_errNo(const int32_t val);

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const ClientOpsRetval & rhs) const
  {
    if (!(errNo == rhs.errNo))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ClientOpsRetval &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientOpsRetval & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ClientOpsRetval &a, ClientOpsRetval &b);

inline std::ostream& operator<<(std::ostream& out, const ClientOpsRetval& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Ping_ACK__isset {
  _Ping_ACK__isset() : errNo(false), errMsg(false) {}
  bool errNo :1;
  bool errMsg :1;
} _Ping_ACK__isset;

class Ping_ACK : public virtual ::apache::thrift::TBase {
 public:

  Ping_ACK(const Ping_ACK&);
  Ping_ACK& operator=(const Ping_ACK&);
  Ping_ACK() : errNo(0), errMsg() {
  }

  virtual ~Ping_ACK() throw();
  int32_t errNo;
  std::string errMsg;

  _Ping_ACK__isset __isset;

  void __set_errNo(const int32_t val);

  void __set_errMsg(const std::string& val);

  bool operator == (const Ping_ACK & rhs) const
  {
    if (!(errNo == rhs.errNo))
      return false;
    if (!(errMsg == rhs.errMsg))
      return false;
    return true;
  }
  bool operator != (const Ping_ACK &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ping_ACK & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Ping_ACK &a, Ping_ACK &b);

inline std::ostream& operator<<(std::ostream& out, const Ping_ACK& obj)
{
  obj.printTo(out);
  return out;
}



#endif
