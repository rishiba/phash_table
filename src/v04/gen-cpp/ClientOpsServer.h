/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ClientOpsServer_H
#define ClientOpsServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "wal_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ClientOpsServerIf {
 public:
  virtual ~ClientOpsServerIf() {}
  virtual void ping(Ping_ACK& _return) = 0;
  virtual void submit_ops(ClientOpsRetval& _return, const ClientOpsArguments& ops) = 0;
};

class ClientOpsServerIfFactory {
 public:
  typedef ClientOpsServerIf Handler;

  virtual ~ClientOpsServerIfFactory() {}

  virtual ClientOpsServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ClientOpsServerIf* /* handler */) = 0;
};

class ClientOpsServerIfSingletonFactory : virtual public ClientOpsServerIfFactory {
 public:
  ClientOpsServerIfSingletonFactory(const boost::shared_ptr<ClientOpsServerIf>& iface) : iface_(iface) {}
  virtual ~ClientOpsServerIfSingletonFactory() {}

  virtual ClientOpsServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ClientOpsServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<ClientOpsServerIf> iface_;
};

class ClientOpsServerNull : virtual public ClientOpsServerIf {
 public:
  virtual ~ClientOpsServerNull() {}
  void ping(Ping_ACK& /* _return */) {
    return;
  }
  void submit_ops(ClientOpsRetval& /* _return */, const ClientOpsArguments& /* ops */) {
    return;
  }
};


class ClientOpsServer_ping_args {
 public:

  ClientOpsServer_ping_args(const ClientOpsServer_ping_args&);
  ClientOpsServer_ping_args& operator=(const ClientOpsServer_ping_args&);
  ClientOpsServer_ping_args() {
  }

  virtual ~ClientOpsServer_ping_args() throw();

  bool operator == (const ClientOpsServer_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClientOpsServer_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientOpsServer_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientOpsServer_ping_pargs {
 public:


  virtual ~ClientOpsServer_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientOpsServer_ping_result__isset {
  _ClientOpsServer_ping_result__isset() : success(false) {}
  bool success :1;
} _ClientOpsServer_ping_result__isset;

class ClientOpsServer_ping_result {
 public:

  ClientOpsServer_ping_result(const ClientOpsServer_ping_result&);
  ClientOpsServer_ping_result& operator=(const ClientOpsServer_ping_result&);
  ClientOpsServer_ping_result() {
  }

  virtual ~ClientOpsServer_ping_result() throw();
  Ping_ACK success;

  _ClientOpsServer_ping_result__isset __isset;

  void __set_success(const Ping_ACK& val);

  bool operator == (const ClientOpsServer_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientOpsServer_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientOpsServer_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientOpsServer_ping_presult__isset {
  _ClientOpsServer_ping_presult__isset() : success(false) {}
  bool success :1;
} _ClientOpsServer_ping_presult__isset;

class ClientOpsServer_ping_presult {
 public:


  virtual ~ClientOpsServer_ping_presult() throw();
  Ping_ACK* success;

  _ClientOpsServer_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientOpsServer_submit_ops_args__isset {
  _ClientOpsServer_submit_ops_args__isset() : ops(false) {}
  bool ops :1;
} _ClientOpsServer_submit_ops_args__isset;

class ClientOpsServer_submit_ops_args {
 public:

  ClientOpsServer_submit_ops_args(const ClientOpsServer_submit_ops_args&);
  ClientOpsServer_submit_ops_args& operator=(const ClientOpsServer_submit_ops_args&);
  ClientOpsServer_submit_ops_args() {
  }

  virtual ~ClientOpsServer_submit_ops_args() throw();
  ClientOpsArguments ops;

  _ClientOpsServer_submit_ops_args__isset __isset;

  void __set_ops(const ClientOpsArguments& val);

  bool operator == (const ClientOpsServer_submit_ops_args & rhs) const
  {
    if (!(ops == rhs.ops))
      return false;
    return true;
  }
  bool operator != (const ClientOpsServer_submit_ops_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientOpsServer_submit_ops_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientOpsServer_submit_ops_pargs {
 public:


  virtual ~ClientOpsServer_submit_ops_pargs() throw();
  const ClientOpsArguments* ops;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientOpsServer_submit_ops_result__isset {
  _ClientOpsServer_submit_ops_result__isset() : success(false) {}
  bool success :1;
} _ClientOpsServer_submit_ops_result__isset;

class ClientOpsServer_submit_ops_result {
 public:

  ClientOpsServer_submit_ops_result(const ClientOpsServer_submit_ops_result&);
  ClientOpsServer_submit_ops_result& operator=(const ClientOpsServer_submit_ops_result&);
  ClientOpsServer_submit_ops_result() {
  }

  virtual ~ClientOpsServer_submit_ops_result() throw();
  ClientOpsRetval success;

  _ClientOpsServer_submit_ops_result__isset __isset;

  void __set_success(const ClientOpsRetval& val);

  bool operator == (const ClientOpsServer_submit_ops_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientOpsServer_submit_ops_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientOpsServer_submit_ops_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientOpsServer_submit_ops_presult__isset {
  _ClientOpsServer_submit_ops_presult__isset() : success(false) {}
  bool success :1;
} _ClientOpsServer_submit_ops_presult__isset;

class ClientOpsServer_submit_ops_presult {
 public:


  virtual ~ClientOpsServer_submit_ops_presult() throw();
  ClientOpsRetval* success;

  _ClientOpsServer_submit_ops_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientOpsServerClient : virtual public ClientOpsServerIf {
 public:
  ClientOpsServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ClientOpsServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(Ping_ACK& _return);
  void send_ping();
  void recv_ping(Ping_ACK& _return);
  void submit_ops(ClientOpsRetval& _return, const ClientOpsArguments& ops);
  void send_submit_ops(const ClientOpsArguments& ops);
  void recv_submit_ops(ClientOpsRetval& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClientOpsServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ClientOpsServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ClientOpsServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_submit_ops(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ClientOpsServerProcessor(boost::shared_ptr<ClientOpsServerIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &ClientOpsServerProcessor::process_ping;
    processMap_["submit_ops"] = &ClientOpsServerProcessor::process_submit_ops;
  }

  virtual ~ClientOpsServerProcessor() {}
};

class ClientOpsServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ClientOpsServerProcessorFactory(const ::boost::shared_ptr< ClientOpsServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ClientOpsServerIfFactory > handlerFactory_;
};

class ClientOpsServerMultiface : virtual public ClientOpsServerIf {
 public:
  ClientOpsServerMultiface(std::vector<boost::shared_ptr<ClientOpsServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ClientOpsServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ClientOpsServerIf> > ifaces_;
  ClientOpsServerMultiface() {}
  void add(boost::shared_ptr<ClientOpsServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(Ping_ACK& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

  void submit_ops(ClientOpsRetval& _return, const ClientOpsArguments& ops) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->submit_ops(_return, ops);
    }
    ifaces_[i]->submit_ops(_return, ops);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ClientOpsServerConcurrentClient : virtual public ClientOpsServerIf {
 public:
  ClientOpsServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ClientOpsServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(Ping_ACK& _return);
  int32_t send_ping();
  void recv_ping(Ping_ACK& _return, const int32_t seqid);
  void submit_ops(ClientOpsRetval& _return, const ClientOpsArguments& ops);
  int32_t send_submit_ops(const ClientOpsArguments& ops);
  void recv_submit_ops(ClientOpsRetval& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
