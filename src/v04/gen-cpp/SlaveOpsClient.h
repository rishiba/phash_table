/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SlaveOpsClient_H
#define SlaveOpsClient_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "wal_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SlaveOpsClientIf {
 public:
  virtual ~SlaveOpsClientIf() {}
  virtual void ping(Ping_ACK& _return) = 0;
  virtual void submit_ops_to_slave(SlaveOpsRetval& _return, const SlaveOpsArguments& ops) = 0;
};

class SlaveOpsClientIfFactory {
 public:
  typedef SlaveOpsClientIf Handler;

  virtual ~SlaveOpsClientIfFactory() {}

  virtual SlaveOpsClientIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SlaveOpsClientIf* /* handler */) = 0;
};

class SlaveOpsClientIfSingletonFactory : virtual public SlaveOpsClientIfFactory {
 public:
  SlaveOpsClientIfSingletonFactory(const boost::shared_ptr<SlaveOpsClientIf>& iface) : iface_(iface) {}
  virtual ~SlaveOpsClientIfSingletonFactory() {}

  virtual SlaveOpsClientIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SlaveOpsClientIf* /* handler */) {}

 protected:
  boost::shared_ptr<SlaveOpsClientIf> iface_;
};

class SlaveOpsClientNull : virtual public SlaveOpsClientIf {
 public:
  virtual ~SlaveOpsClientNull() {}
  void ping(Ping_ACK& /* _return */) {
    return;
  }
  void submit_ops_to_slave(SlaveOpsRetval& /* _return */, const SlaveOpsArguments& /* ops */) {
    return;
  }
};


class SlaveOpsClient_ping_args {
 public:

  SlaveOpsClient_ping_args(const SlaveOpsClient_ping_args&);
  SlaveOpsClient_ping_args& operator=(const SlaveOpsClient_ping_args&);
  SlaveOpsClient_ping_args() {
  }

  virtual ~SlaveOpsClient_ping_args() throw();

  bool operator == (const SlaveOpsClient_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SlaveOpsClient_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlaveOpsClient_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SlaveOpsClient_ping_pargs {
 public:


  virtual ~SlaveOpsClient_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SlaveOpsClient_ping_result__isset {
  _SlaveOpsClient_ping_result__isset() : success(false) {}
  bool success :1;
} _SlaveOpsClient_ping_result__isset;

class SlaveOpsClient_ping_result {
 public:

  SlaveOpsClient_ping_result(const SlaveOpsClient_ping_result&);
  SlaveOpsClient_ping_result& operator=(const SlaveOpsClient_ping_result&);
  SlaveOpsClient_ping_result() {
  }

  virtual ~SlaveOpsClient_ping_result() throw();
  Ping_ACK success;

  _SlaveOpsClient_ping_result__isset __isset;

  void __set_success(const Ping_ACK& val);

  bool operator == (const SlaveOpsClient_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SlaveOpsClient_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlaveOpsClient_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SlaveOpsClient_ping_presult__isset {
  _SlaveOpsClient_ping_presult__isset() : success(false) {}
  bool success :1;
} _SlaveOpsClient_ping_presult__isset;

class SlaveOpsClient_ping_presult {
 public:


  virtual ~SlaveOpsClient_ping_presult() throw();
  Ping_ACK* success;

  _SlaveOpsClient_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SlaveOpsClient_submit_ops_to_slave_args__isset {
  _SlaveOpsClient_submit_ops_to_slave_args__isset() : ops(false) {}
  bool ops :1;
} _SlaveOpsClient_submit_ops_to_slave_args__isset;

class SlaveOpsClient_submit_ops_to_slave_args {
 public:

  SlaveOpsClient_submit_ops_to_slave_args(const SlaveOpsClient_submit_ops_to_slave_args&);
  SlaveOpsClient_submit_ops_to_slave_args& operator=(const SlaveOpsClient_submit_ops_to_slave_args&);
  SlaveOpsClient_submit_ops_to_slave_args() {
  }

  virtual ~SlaveOpsClient_submit_ops_to_slave_args() throw();
  SlaveOpsArguments ops;

  _SlaveOpsClient_submit_ops_to_slave_args__isset __isset;

  void __set_ops(const SlaveOpsArguments& val);

  bool operator == (const SlaveOpsClient_submit_ops_to_slave_args & rhs) const
  {
    if (!(ops == rhs.ops))
      return false;
    return true;
  }
  bool operator != (const SlaveOpsClient_submit_ops_to_slave_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlaveOpsClient_submit_ops_to_slave_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SlaveOpsClient_submit_ops_to_slave_pargs {
 public:


  virtual ~SlaveOpsClient_submit_ops_to_slave_pargs() throw();
  const SlaveOpsArguments* ops;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SlaveOpsClient_submit_ops_to_slave_result__isset {
  _SlaveOpsClient_submit_ops_to_slave_result__isset() : success(false) {}
  bool success :1;
} _SlaveOpsClient_submit_ops_to_slave_result__isset;

class SlaveOpsClient_submit_ops_to_slave_result {
 public:

  SlaveOpsClient_submit_ops_to_slave_result(const SlaveOpsClient_submit_ops_to_slave_result&);
  SlaveOpsClient_submit_ops_to_slave_result& operator=(const SlaveOpsClient_submit_ops_to_slave_result&);
  SlaveOpsClient_submit_ops_to_slave_result() {
  }

  virtual ~SlaveOpsClient_submit_ops_to_slave_result() throw();
  SlaveOpsRetval success;

  _SlaveOpsClient_submit_ops_to_slave_result__isset __isset;

  void __set_success(const SlaveOpsRetval& val);

  bool operator == (const SlaveOpsClient_submit_ops_to_slave_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SlaveOpsClient_submit_ops_to_slave_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlaveOpsClient_submit_ops_to_slave_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SlaveOpsClient_submit_ops_to_slave_presult__isset {
  _SlaveOpsClient_submit_ops_to_slave_presult__isset() : success(false) {}
  bool success :1;
} _SlaveOpsClient_submit_ops_to_slave_presult__isset;

class SlaveOpsClient_submit_ops_to_slave_presult {
 public:


  virtual ~SlaveOpsClient_submit_ops_to_slave_presult() throw();
  SlaveOpsRetval* success;

  _SlaveOpsClient_submit_ops_to_slave_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SlaveOpsClientClient : virtual public SlaveOpsClientIf {
 public:
  SlaveOpsClientClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SlaveOpsClientClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(Ping_ACK& _return);
  void send_ping();
  void recv_ping(Ping_ACK& _return);
  void submit_ops_to_slave(SlaveOpsRetval& _return, const SlaveOpsArguments& ops);
  void send_submit_ops_to_slave(const SlaveOpsArguments& ops);
  void recv_submit_ops_to_slave(SlaveOpsRetval& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SlaveOpsClientProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SlaveOpsClientIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SlaveOpsClientProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_submit_ops_to_slave(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SlaveOpsClientProcessor(boost::shared_ptr<SlaveOpsClientIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &SlaveOpsClientProcessor::process_ping;
    processMap_["submit_ops_to_slave"] = &SlaveOpsClientProcessor::process_submit_ops_to_slave;
  }

  virtual ~SlaveOpsClientProcessor() {}
};

class SlaveOpsClientProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SlaveOpsClientProcessorFactory(const ::boost::shared_ptr< SlaveOpsClientIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SlaveOpsClientIfFactory > handlerFactory_;
};

class SlaveOpsClientMultiface : virtual public SlaveOpsClientIf {
 public:
  SlaveOpsClientMultiface(std::vector<boost::shared_ptr<SlaveOpsClientIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SlaveOpsClientMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SlaveOpsClientIf> > ifaces_;
  SlaveOpsClientMultiface() {}
  void add(boost::shared_ptr<SlaveOpsClientIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(Ping_ACK& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

  void submit_ops_to_slave(SlaveOpsRetval& _return, const SlaveOpsArguments& ops) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->submit_ops_to_slave(_return, ops);
    }
    ifaces_[i]->submit_ops_to_slave(_return, ops);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SlaveOpsClientConcurrentClient : virtual public SlaveOpsClientIf {
 public:
  SlaveOpsClientConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SlaveOpsClientConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(Ping_ACK& _return);
  int32_t send_ping();
  void recv_ping(Ping_ACK& _return, const int32_t seqid);
  void submit_ops_to_slave(SlaveOpsRetval& _return, const SlaveOpsArguments& ops);
  int32_t send_submit_ops_to_slave(const SlaveOpsArguments& ops);
  void recv_submit_ops_to_slave(SlaveOpsRetval& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
