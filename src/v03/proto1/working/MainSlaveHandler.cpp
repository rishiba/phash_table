// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "gen-cpp/wal_types.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

#include "wal_user.h"
#include "ops.h"

#include "SlaveLocal.h"


class PhashSlaveHandler : virtual public PhashSlaveIf {
	private:
	SlaveLocal *local;

	public:
		PhashSlaveHandler() {

			// Your initialization goes here
			local = new SlaveLocal();
		}

		void ping(Ping_ACK& _return) {
			// Your implementation goes here
			printf("ping\n");
		}

		void submit_ops_to_slave(SlaveOpsAck& _return, const SlaveOps& ops) {
			// Your implementation goes here
			printf("submit_ops_to_slave\n");

			int retval = local->submit_ops(ops);

			if (retval == ERR_INCORRECT_PLACE_TO_RETURN) {
				std::cerr <<"\nReturning from incorrect place";
			} else if (retval == SUCCESS) {
				_return.errNo = SUCCESS;
				_return.key = ops.key;
			} else {
				_return.errNo = retval;
				_return.key = ops.key;
				_return.value = "Error in operation";
			}
		}
};

int main(int argc, char **argv) {
	int port = 9090;
	shared_ptr<PhashSlaveHandler> handler(new PhashSlaveHandler());
	shared_ptr<TProcessor> processor(new PhashSlaveProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	server.serve();
	return 0;
}

