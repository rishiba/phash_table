// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "PhashServerHandler.h"
#include "PhashServer.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "OpsReplicator.h"
#include "ops.h"
#include "wal_user.h"
#include "wal_constants.h"
#include <iostream>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

void PhashServerHandler::submit_ops(ClientOpsRetval& _return, const ClientOps& ops) {
	// Your implementation goes here
	printf("submit_ops\n");
	int retval;
	switch(ops.op_type) {
		case OP_INSERT:
			retval = replicator->insert_record(ops.key, ops.value);
            if (retval == ERR_INCORRECT_PLACE_TO_RETURN) {
           std::cerr <<"\nReturned from an incorrect place";
            } else if (retval != SUCCESS) {
				std::cerr <<"\nError inserting record.";
				_return.errNo = retval;
				_return.key = ops.key;
				_return.value = "Error inserting record";
			} else {
				_return.errNo = SUCCESS;
				_return.key = ops.key;
			}
			break;
	}
}

PhashServerHandler::PhashServerHandler() {
			// Your initialization goes here
			replicator = new OpsReplicator();
}

void PhashServerHandler::ping(Ping_ACK &_return) {
			// Your implementation goes her
			printf("ping\n");
}

int main(int argc, char **argv) {
	int port = 9090;
	shared_ptr<PhashServerHandler> handler(new PhashServerHandler());
	shared_ptr<TProcessor> processor(new PhashServerProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	server.serve();
	return 0;
}

