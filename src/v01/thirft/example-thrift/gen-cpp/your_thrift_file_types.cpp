/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "your_thrift_file_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Test {


Ops::~Ops() throw() {
}


void Ops::__set_num(const int32_t val) {
  this->num = val;
}

void Ops::__set_key(const std::string& val) {
  this->key = val;
}

void Ops::__set_value(const std::string& val) {
  this->value = val;
}

void Ops::__set_address(const std::string& val) {
  this->address = val;
}

uint32_t Ops::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num);
          this->__isset.num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Ops::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Ops");

  xfer += oprot->writeFieldBegin("num", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Ops &a, Ops &b) {
  using ::std::swap;
  swap(a.num, b.num);
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.address, b.address);
  swap(a.__isset, b.__isset);
}

Ops::Ops(const Ops& other0) {
  num = other0.num;
  key = other0.key;
  value = other0.value;
  address = other0.address;
  __isset = other0.__isset;
}
Ops& Ops::operator=(const Ops& other1) {
  num = other1.num;
  key = other1.key;
  value = other1.value;
  address = other1.address;
  __isset = other1.__isset;
  return *this;
}
void Ops::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Ops(";
  out << "num=" << to_string(num);
  out << ", " << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ", " << "address=" << to_string(address);
  out << ")";
}


Ops_ACK::~Ops_ACK() throw() {
}


void Ops_ACK::__set_errnum(const int32_t val) {
  this->errnum = val;
}

void Ops_ACK::__set_errMsg(const std::string& val) {
  this->errMsg = val;
}

uint32_t Ops_ACK::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errnum);
          this->__isset.errnum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errMsg);
          this->__isset.errMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Ops_ACK::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Ops_ACK");

  xfer += oprot->writeFieldBegin("errnum", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errnum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errMsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errMsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Ops_ACK &a, Ops_ACK &b) {
  using ::std::swap;
  swap(a.errnum, b.errnum);
  swap(a.errMsg, b.errMsg);
  swap(a.__isset, b.__isset);
}

Ops_ACK::Ops_ACK(const Ops_ACK& other2) {
  errnum = other2.errnum;
  errMsg = other2.errMsg;
  __isset = other2.__isset;
}
Ops_ACK& Ops_ACK::operator=(const Ops_ACK& other3) {
  errnum = other3.errnum;
  errMsg = other3.errMsg;
  __isset = other3.__isset;
  return *this;
}
void Ops_ACK::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Ops_ACK(";
  out << "errnum=" << to_string(errnum);
  out << ", " << "errMsg=" << to_string(errMsg);
  out << ")";
}

} // namespace
