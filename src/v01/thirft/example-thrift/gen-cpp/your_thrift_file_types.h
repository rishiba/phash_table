/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef your_thrift_file_TYPES_H
#define your_thrift_file_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Test {

class Ops;

class Ops_ACK;

typedef struct _Ops__isset {
  _Ops__isset() : num(false), key(false), value(false), address(false) {}
  bool num :1;
  bool key :1;
  bool value :1;
  bool address :1;
} _Ops__isset;

class Ops : public virtual ::apache::thrift::TBase {
 public:

  Ops(const Ops&);
  Ops& operator=(const Ops&);
  Ops() : num(0), key(), value(), address() {
  }

  virtual ~Ops() throw();
  int32_t num;
  std::string key;
  std::string value;
  std::string address;

  _Ops__isset __isset;

  void __set_num(const int32_t val);

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  void __set_address(const std::string& val);

  bool operator == (const Ops & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const Ops &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ops & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Ops &a, Ops &b);

inline std::ostream& operator<<(std::ostream& out, const Ops& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Ops_ACK__isset {
  _Ops_ACK__isset() : errnum(false), errMsg(false) {}
  bool errnum :1;
  bool errMsg :1;
} _Ops_ACK__isset;

class Ops_ACK : public virtual ::apache::thrift::TBase {
 public:

  Ops_ACK(const Ops_ACK&);
  Ops_ACK& operator=(const Ops_ACK&);
  Ops_ACK() : errnum(0), errMsg() {
  }

  virtual ~Ops_ACK() throw();
  int32_t errnum;
  std::string errMsg;

  _Ops_ACK__isset __isset;

  void __set_errnum(const int32_t val);

  void __set_errMsg(const std::string& val);

  bool operator == (const Ops_ACK & rhs) const
  {
    if (!(errnum == rhs.errnum))
      return false;
    if (!(errMsg == rhs.errMsg))
      return false;
    return true;
  }
  bool operator != (const Ops_ACK &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ops_ACK & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Ops_ACK &a, Ops_ACK &b);

inline std::ostream& operator<<(std::ostream& out, const Ops_ACK& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
