/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ourPackets_TYPES_H
#define ourPackets_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef struct _Ops__isset {
  _Ops__isset() : op_type(false), key(false), value(false), address(false) {}
  bool op_type;
  bool key;
  bool value;
  bool address;
} _Ops__isset;

class Ops {
 public:

  static const char* ascii_fingerprint; // = "C4A8A7FE71C2DB9CB73D92862AA4C591";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0xA8,0xA7,0xFE,0x71,0xC2,0xDB,0x9C,0xB7,0x3D,0x92,0x86,0x2A,0xA4,0xC5,0x91};

  Ops() : op_type(0), key(), value(), address() {
  }

  virtual ~Ops() throw() {}

  int32_t op_type;
  std::string key;
  std::string value;
  std::string address;

  _Ops__isset __isset;

  void __set_op_type(const int32_t val) {
    op_type = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_address(const std::string& val) {
    address = val;
  }

  bool operator == (const Ops & rhs) const
  {
    if (!(op_type == rhs.op_type))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const Ops &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ops & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Ops &a, Ops &b);

typedef struct _Ops_ACK__isset {
  _Ops_ACK__isset() : address(false), errno(false), errMsg(false) {}
  bool address;
  bool errno;
  bool errMsg;
} _Ops_ACK__isset;

class Ops_ACK {
 public:

  static const char* ascii_fingerprint; // = "70563A0628F75DF9555F4D24690B1E26";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0x56,0x3A,0x06,0x28,0xF7,0x5D,0xF9,0x55,0x5F,0x4D,0x24,0x69,0x0B,0x1E,0x26};

  Ops_ACK() : address(), errno(0), errMsg() {
  }

  virtual ~Ops_ACK() throw() {}

  std::string address;
  int32_t errno;
  std::string errMsg;

  _Ops_ACK__isset __isset;

  void __set_address(const std::string& val) {
    address = val;
  }

  void __set_errno(const int32_t val) {
    errno = val;
  }

  void __set_errMsg(const std::string& val) {
    errMsg = val;
  }

  bool operator == (const Ops_ACK & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(errno == rhs.errno))
      return false;
    if (!(errMsg == rhs.errMsg))
      return false;
    return true;
  }
  bool operator != (const Ops_ACK &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ops_ACK & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Ops_ACK &a, Ops_ACK &b);

typedef struct _Error__isset {
  _Error__isset() : errno(false), errMsg(false) {}
  bool errno;
  bool errMsg;
} _Error__isset;

class Error {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  Error() : errno(0), errMsg() {
  }

  virtual ~Error() throw() {}

  int32_t errno;
  std::string errMsg;

  _Error__isset __isset;

  void __set_errno(const int32_t val) {
    errno = val;
  }

  void __set_errMsg(const std::string& val) {
    errMsg = val;
  }

  bool operator == (const Error & rhs) const
  {
    if (!(errno == rhs.errno))
      return false;
    if (!(errMsg == rhs.errMsg))
      return false;
    return true;
  }
  bool operator != (const Error &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Error & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Error &a, Error &b);



#endif
