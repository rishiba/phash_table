/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WALTransfer_H
#define WALTransfer_H

#include <thrift/TDispatchProcessor.h>
#include "ourPackets_types.h"



class WALTransferIf {
 public:
  virtual ~WALTransferIf() {}
  virtual void ping() = 0;
  virtual void submit_ops(Ops_ACK& _return, const Ops& w) = 0;
};

class WALTransferIfFactory {
 public:
  typedef WALTransferIf Handler;

  virtual ~WALTransferIfFactory() {}

  virtual WALTransferIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(WALTransferIf* /* handler */) = 0;
};

class WALTransferIfSingletonFactory : virtual public WALTransferIfFactory {
 public:
  WALTransferIfSingletonFactory(const boost::shared_ptr<WALTransferIf>& iface) : iface_(iface) {}
  virtual ~WALTransferIfSingletonFactory() {}

  virtual WALTransferIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(WALTransferIf* /* handler */) {}

 protected:
  boost::shared_ptr<WALTransferIf> iface_;
};

class WALTransferNull : virtual public WALTransferIf {
 public:
  virtual ~WALTransferNull() {}
  void ping() {
    return;
  }
  void submit_ops(Ops_ACK& /* _return */, const Ops& /* w */) {
    return;
  }
};


class WALTransfer_ping_args {
 public:

  WALTransfer_ping_args() {
  }

  virtual ~WALTransfer_ping_args() throw() {}


  bool operator == (const WALTransfer_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WALTransfer_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WALTransfer_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WALTransfer_ping_pargs {
 public:


  virtual ~WALTransfer_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WALTransfer_ping_result {
 public:

  WALTransfer_ping_result() {
  }

  virtual ~WALTransfer_ping_result() throw() {}


  bool operator == (const WALTransfer_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WALTransfer_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WALTransfer_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WALTransfer_ping_presult {
 public:


  virtual ~WALTransfer_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WALTransfer_submit_ops_args__isset {
  _WALTransfer_submit_ops_args__isset() : w(false) {}
  bool w;
} _WALTransfer_submit_ops_args__isset;

class WALTransfer_submit_ops_args {
 public:

  WALTransfer_submit_ops_args() {
  }

  virtual ~WALTransfer_submit_ops_args() throw() {}

  Ops w;

  _WALTransfer_submit_ops_args__isset __isset;

  void __set_w(const Ops& val) {
    w = val;
  }

  bool operator == (const WALTransfer_submit_ops_args & rhs) const
  {
    if (!(w == rhs.w))
      return false;
    return true;
  }
  bool operator != (const WALTransfer_submit_ops_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WALTransfer_submit_ops_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WALTransfer_submit_ops_pargs {
 public:


  virtual ~WALTransfer_submit_ops_pargs() throw() {}

  const Ops* w;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WALTransfer_submit_ops_result__isset {
  _WALTransfer_submit_ops_result__isset() : success(false) {}
  bool success;
} _WALTransfer_submit_ops_result__isset;

class WALTransfer_submit_ops_result {
 public:

  WALTransfer_submit_ops_result() {
  }

  virtual ~WALTransfer_submit_ops_result() throw() {}

  Ops_ACK success;

  _WALTransfer_submit_ops_result__isset __isset;

  void __set_success(const Ops_ACK& val) {
    success = val;
  }

  bool operator == (const WALTransfer_submit_ops_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WALTransfer_submit_ops_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WALTransfer_submit_ops_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WALTransfer_submit_ops_presult__isset {
  _WALTransfer_submit_ops_presult__isset() : success(false) {}
  bool success;
} _WALTransfer_submit_ops_presult__isset;

class WALTransfer_submit_ops_presult {
 public:


  virtual ~WALTransfer_submit_ops_presult() throw() {}

  Ops_ACK* success;

  _WALTransfer_submit_ops_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class WALTransferClient : virtual public WALTransferIf {
 public:
  WALTransferClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  WALTransferClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void submit_ops(Ops_ACK& _return, const Ops& w);
  void send_submit_ops(const Ops& w);
  void recv_submit_ops(Ops_ACK& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class WALTransferProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<WALTransferIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (WALTransferProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_submit_ops(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  WALTransferProcessor(boost::shared_ptr<WALTransferIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &WALTransferProcessor::process_ping;
    processMap_["submit_ops"] = &WALTransferProcessor::process_submit_ops;
  }

  virtual ~WALTransferProcessor() {}
};

class WALTransferProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  WALTransferProcessorFactory(const ::boost::shared_ptr< WALTransferIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< WALTransferIfFactory > handlerFactory_;
};

class WALTransferMultiface : virtual public WALTransferIf {
 public:
  WALTransferMultiface(std::vector<boost::shared_ptr<WALTransferIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WALTransferMultiface() {}
 protected:
  std::vector<boost::shared_ptr<WALTransferIf> > ifaces_;
  WALTransferMultiface() {}
  void add(boost::shared_ptr<WALTransferIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void submit_ops(Ops_ACK& _return, const Ops& w) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->submit_ops(_return, w);
    }
    ifaces_[i]->submit_ops(_return, w);
    return;
  }

};



#endif
